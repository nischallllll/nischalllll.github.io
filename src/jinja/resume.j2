<!-- resume.j2 -->
<article class="resume" data-page="resume">
  <header>
    <h2 class="h2 article-title">{{resume.HEADER.label}}</h2>
  </header>

  {# PDF CV block intentionally moved lower so legacy sections (Education/Experience/etc)
     render first; the preview is not shown inline by default. #}

  <!-- EDUCATION -->
  {% if resume.EDUCATION.enabled %}
  <section class="timeline">
    <div class="title-wrapper">
      <div class="icon-box">
        <ion-icon name="book-outline"></ion-icon>
      </div>
      <h3 class="h3">{{resume.EDUCATION.label}}</h3>
    </div>
    <ol class="timeline-list">
      {% for item in resume.EDUCATION["items"] | reverse %}
      <li class="timeline-item">
        <h4 class="h4 timeline-item-title">{{item.institution}}</h4>
        <span>{{item.period}}</span>
        <p class="timeline-text">
          {{item.description}}
        </p>
      </li>
      {% endfor %}
    </ol>
  </section>
  {% endif %}

  <!-- EXPERIENCE -->
  {% if resume.EXPERIENCE.enabled %}
  <section class="timeline">
    <div class="title-wrapper">
      <div class="icon-box">
        <ion-icon name="book-outline"></ion-icon>
      </div>
      <h3 class="h3">{{resume.EXPERIENCE.label}}</h3>
    </div>
    <ol class="timeline-list">
      {% for item in resume.EXPERIENCE["items"] | reverse %}
      <li class="timeline-item">
        <h4 class="h4 timeline-item-title">{{item.position}}</h4>
        <span>{{item.period}}</span>
        <p class="timeline-text">
          {{item.description}}
        </p>
      </li>
      {% endfor %}
    </ol>
  </section>
  {% endif %}

  <!-- LANGUAGES -->
  {% if resume.LANGUAGES.enabled %}
  <section class="skill">
    <h3 class="h3 skills-title">{{resume.LANGUAGES.label}}</h3>
    <ul class="skills-list content-card">
      {% for item in resume.LANGUAGES["items"] %}
      <li class="skills-item">
        <div class="title-wrapper">
          <h5 class="h5">{{item.language}}</h5>
          {% if resume.LANGUAGES.display_percentage_values %}
          <data value="{{item.proficiency[:-1]}}">{{item.proficiency}}</data>
          {% endif %}
        </div>
        {% if resume.LANGUAGES.display_progress_bars %}
        <div class="skill-progress-bg">
          <div class="skill-progress-fill" style="width: {{item.proficiency}};"></div>
        </div>
        {% endif %}
      </li>
      {% endfor %}
    </ul>
  </section>
  <br>
  {% endif %}

  <!-- SKILLS -->
  {% if resume.SKILLS.enabled %}
  <section class="skill">
    <h3 class="h3 skills-title">{{resume.SKILLS.label}}</h3>
    <ul class="skills-list content-card">
      {% for item in resume.SKILLS["items"] %}
      <li class="skills-item">
        <div class="title-wrapper">
          <h5 class="h5">{{item.skill}}</h5>
          {% if resume.SKILLS.display_percentage_values %}
          <data value="{{item.proficiency[:-1]}}">{{item.proficiency}}</data>
          {% endif %}
        </div>
        {% if resume.SKILLS.display_progress_bars %}
        <div class="skill-progress-bg">
          <div class="skill-progress-fill" style="width: {{item.proficiency}};"></div>
        </div>
        {% endif %}
      </li>
      {% endfor %}
    </ul>
  </section>
  {% endif %}

  {% if resume.PDF_CV.enabled %}
  <section class="pdf-cv-section">
    <div class="pdf-cv-container">
      <div class="pdf-cv-content">
        <h3 class="h3 pdf-cv-title">{{resume.PDF_CV.title}}</h3>
        <p class="pdf-cv-description">{{resume.PDF_CV.description}}</p>
        <div class="pdf-cv-button-container">
          <a href="{{resume.PDF_CV.pdf_url}}" class="pdf-cv-button" download>
            <ion-icon name="{{resume.PDF_CV.icon}}"></ion-icon>
            <span>{{resume.PDF_CV.button_text}}</span>
          </a>
          <button class="pdf-cv-button pdf-view-btn" type="button" aria-haspopup="dialog" aria-controls="pdf-modal">
            <ion-icon name="eye-outline"></ion-icon>
            <span>View CV</span>
          </button>
        </div>
      </div>
    </div>
  </section>
  {% endif %}
</article>
<!-- PDF Modal Viewer -->
<div id="pdf-modal" class="pdf-modal" role="dialog" aria-modal="true" aria-hidden="true">
  <div class="pdf-modal-overlay" data-pdf-overlay></div>
  <div class="pdf-modal-panel" role="document">
    <button class="pdf-modal-close" aria-label="Close CV viewer">&times;</button>
    <div class="pdf-modal-body">
      <object id="pdf-modal-object" data="{{resume.PDF_CV.pdf_url}}" type="application/pdf" width="100%" height="100%">
        <p>Your browser doesn't support PDF preview. <a href="{{resume.PDF_CV.pdf_url}}" target="_blank">Click here to view the PDF</a>.</p>
      </object>
    </div>
  </div>
</div>

<script>
  (function(){
    const openBtn = document.querySelector('.pdf-view-btn');
    const modal = document.getElementById('pdf-modal');
    const overlay = modal && modal.querySelector('[data-pdf-overlay]');
    const closeBtn = modal && modal.querySelector('.pdf-modal-close');
    let previouslyFocused = null;
    let focusableElements = [];

    function updateFocusableElements(){
      if(!modal) return;
      focusableElements = Array.from(modal.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex]:not([tabindex="-1"])'));
      // filter out elements that are not visible
      focusableElements = focusableElements.filter(el => el.offsetWidth > 0 || el.offsetHeight > 0 || el.getClientRects().length);
    }

    function trapTabKey(e){
      if(e.key !== 'Tab') return;
      updateFocusableElements();
      if(focusableElements.length === 0){
        e.preventDefault();
        return;
      }
      const firstEl = focusableElements[0];
      const lastEl = focusableElements[focusableElements.length - 1];

      if(e.shiftKey){
        if(document.activeElement === firstEl || document.activeElement === modal){
          e.preventDefault();
          lastEl.focus();
        }
      } else {
        if(document.activeElement === lastEl){
          e.preventDefault();
          firstEl.focus();
        }
      }
    }

    function openModal(){
      if(!modal) return;
      previouslyFocused = document.activeElement;
      modal.setAttribute('aria-hidden','false');
      modal.style.display = 'block';
      document.body.style.overflow = 'hidden';
      updateFocusableElements();
      // focus the close button (or first focusable element) for keyboard users
      const toFocus = closeBtn || focusableElements[0] || modal;
      toFocus && toFocus.focus();
      document.addEventListener('keydown', handleKeydown);
    }

    function closeModal(){
      if(!modal) return;
      modal.setAttribute('aria-hidden','true');
      modal.style.display = 'none';
      document.body.style.overflow = '';
      document.removeEventListener('keydown', handleKeydown);
      if(previouslyFocused && previouslyFocused.focus) previouslyFocused.focus();
    }

    function handleKeydown(e){
      if(e.key === 'Escape'){
        e.preventDefault();
        closeModal();
        return;
      }
      trapTabKey(e);
    }

    if(openBtn) openBtn.addEventListener('click', function(e){ e.preventDefault(); openModal(); });
    if(overlay) overlay.addEventListener('click', function(){ closeModal(); });
    if(closeBtn) closeBtn.addEventListener('click', function(){ closeModal(); });

  })();
</script>